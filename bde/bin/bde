#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app

require 'bde'

rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/bde` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/bde now"
  exit 64
end

include GLI::App

program_desc 'Describe your application here'

version Bde::VERSION

subcommand_option_handling :normal
arguments :strict

# Declaration de variable
format = Format.new
accesseur = Accesseur.new(format)
baseDonneeCours = BdCours.new(accesseur)


# desc 'Describe some switch here'
# switch [:s,:switch]

desc 'Selectionne les cours'
#default_value 'the default'
arg_name 'sigle_cours'
flag [:c,:class]

desc 'Liste les eleves d\'un cours / liste les cours autrement'
command :lister do |c|
  c.desc 'arranger la liste par ordre alphabetique'
  c.switch [:a,:arranger]

  # c.desc 'Describe a flag to liste'
  # c.default_value 'default'
  # c.flag :f
  c.action do |global_options,options,args|
    sigle_cours = global_options[:class]
    arranger = options[:arranger]
    
    if sigle_cours.nil?
      puts baseDonneeCours.lister_cours( arranger )
    else
      if !baseDonneeCours.cours_existe( sigle_cours )
        message = "cours: " + sigle_cours + " n\'existe pas.\n"
        puts message
      else
        puts baseDonneeCours.selectionner_cours( sigle_cours ).
                             lister_etudiants( arranger )
      end
    end
    
  end
end

desc 'Ajouter un eleve ou un cours)'
command :ajouter do |c| 
  c.desc "Specifie le nom de l'item (cours ou etudiant)"
  c.flag [:n,:nom]  
  c.desc "Specifie le prenom de l'etudiant"
  c.flag [:p,:prenom] 
   
  c.action do |global_options,options,args|
    sigle_cours = global_options[:class]
    nom = options[:nom]
    prenom = options[:prenom]
    
    if sigle_cours.nil?
      baseDonneeCours.ajouter_cours( nom )
    else
      if !baseDonneeCours.cours_existe( sigle_cours )
        message = "cours: " + sigle_cours + " n\'existe pas.\n"
        puts message
      else
        baseDonneeCours.selectionner_cours( sigle_cours ).
                        ajouter_etudiant( Etudiant.new( nom, prenom ) )
      end
    end
    
  end
end

desc 'Retirer un etudiant ou un cours'
command :retirer do |c|
  c.desc "Specifie le nom de l'item (cours ou etudiant)"
  c.flag [:n,:nom]  
  c.desc "Specifie le prenom de l'etudiant"
  c.flag [:p,:prenom] 
   
  c.action do |global_options,options,args|
    sigle_cours = global_options[:class]
    nom = options[:nom]
    prenom = options[:prenom]
    
    if sigle_cours.nil?
      baseDonneeCours.retirer_cours( nom )
    else
      if !baseDonneeCours.cours_existe( sigle_cours )
        message = "cours: " + sigle_cours + " n\'existe pas.\n"
        puts message
      else
        baseDonneeCours.selectionner_cours( sigle_cours ).
                        retirer_etudiant( Etudiant.new( nom, prenom ) )
      end
    end
    
  end
end

desc 'Liste les evaluations'
command :obtenir_eval do |c|
   
  c.action do |global_options,options,args|
    sigle_cours = global_options[:class]
    
    if sigle_cours.nil?
      puts "une classe doit etre selectionnee."
    else
      if !baseDonneeCours.cours_existe( sigle_cours )
        message = "cours: " + sigle_cours + " n\'existe pas.\n"
        puts message
      else
        puts baseDonneeCours.selectionner_cours( sigle_cours ).lister_evaluations
      end
    end
    
  end
end

desc 'Saisit une evaluation pour un eleve '
command :saisir_eval do |c|  
  c.desc "Specifie le nom de l'item (cours ou etudiant)"
  c.flag [:n,:nom]  
  c.desc "Specifie le prenom de l'etudiant"
  c.flag [:p,:prenom] 
   
  c.action do |global_options,options,args|
    sigle_cours = global_options[:class]
    nom = options[:nom]
    prenom = options[:prenom]
    
    if sigle_cours.nil?
      puts "une classe doit etre selectionnee."
    else
      if !baseDonneeCours.cours_existe( sigle_cours )
        message = "cours: " + sigle_cours + " n\'existe pas.\n"
        puts message
      else
        puts "Veuillez saisir notes: "
        notes_saisies = gets.chomp 
        baseDonneeCours.selectionner_cours( sigle_cours ).
                        saisir_evulations( Etudiant.new( nom, prenom ), notes )
      end
    end
    
  end
end

desc 'Retourne la moyenne d\'un eleve (format: --class=cours moyenne nom prenom)'
#arg_name 'Describe arguments to moyenne here'
command :moyenne do |c|
  c.action do |global_options,options,args|
    cours    = global_options[:class]
    etudiant = Etudiant.new(args.shift,args.shift)
    if !baseDonneeCours.cours_exsite(cours)
      message = "cours: " + cours + "n\'existe pas.\n"
      puts message
    else
      baseDonneeCours.selectionner_cours(cours).afficher_moyenne(etudiant)
    end
  end
end

pre do |global,command,options,args|
  baseDonneeCours.charger_base_donnee(".bde.txt")
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  baseDonneeCours.sauvegarder_base_donnee(".bde.txt")
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
