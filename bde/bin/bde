#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app

require 'bde'

rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/bde` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/bde now"
  exit 64
end

include GLI::App

program_desc 'Describe your application here'

version Bde::VERSION

subcommand_option_handling :normal
arguments :strict

# Declaration de variable
format = Format.new
accesseur = Accesseur.new(format)
baseDonneeCours = BdCours.new(accesseur)


desc 'Selectionne les cours'
arg_name 'sigle_cours'
flag [:c,:class]

desc 'Liste les eleves d\'un cours / liste les cours autrement'
command :lister do |c|
  c.desc 'arranger la liste par ordre alphabetique'
  c.switch [:a,:arranger]

  c.action do |global_options,options,args|
    sigle_cours = global_options[:class]
    arranger = options[:arranger]

    test_options(
      sigle_cours,
      baseDonneeCours.cours_existe?( sigle_cours ),
      ->{ puts baseDonneeCours.lister_cours( arranger ) },
      ->{ puts baseDonneeCours.selectionner_cours( sigle_cours ).
                                lister_etudiants( arranger ) }
    )

  end
end

desc 'Ajouter un eleve ou un cours)'
command :ajouter do |c|
  c.desc "Specifie le nom de l'item (cours ou etudiant)"
  c.flag [:n,:nom]
  c.desc "Specifie le prenom de l'etudiant"
  c.flag [:p,:prenom]

  c.action do |global_options,options,args|
    sigle_cours = global_options[:class]
    nom = options[:nom]
    prenom = options[:prenom]

    test_options(
      sigle_cours,
      baseDonneeCours.cours_existe?( sigle_cours ),
      ->{ baseDonneeCours.ajouter_cours( nom ) },
      ->{ baseDonneeCours.selectionner_cours( sigle_cours ).
                          ajouter_etudiant( Etudiant.new( nom, prenom ) ) }
    )

  end
end

desc 'Retirer un etudiant ou un cours'
command :retirer do |c|
  c.desc "Specifie le nom de l'item (cours ou etudiant)"
  c.flag [:n,:nom]
  c.desc "Specifie le prenom de l'etudiant"
  c.flag [:p,:prenom]

  c.action do |global_options,options,args|
    sigle_cours = global_options[:class]
    nom = options[:nom]
    prenom = options[:prenom]

    test_options(
      sigle_cours,
      baseDonneeCours.cours_existe?( sigle_cours ),
      ->{ baseDonneeCours.retirer_cours( nom ) },
      ->{ baseDonneeCours.selectionner_cours( sigle_cours ).
                        retirer_etudiant( Etudiant.new( nom, prenom ) ) }
    )

  end
end

desc 'Liste les evaluations'
command :obtenir_eval do |c|

  c.action do |global_options,options,args|
    sigle_cours = global_options[:class]

    test_options(
      sigle_cours,
      baseDonneeCours.cours_existe?( sigle_cours ),
      ->{ puts "une classe doit etre selectionnee." },
      ->{ puts baseDonneeCours.selectionner_cours( sigle_cours ).lister_evaluations }
    )

  end
end

desc 'Saisit une evaluation pour un eleve '
command :saisir_eval do |c|
  c.desc "Specifie le nom de l'item (cours ou etudiant)"
  c.flag [:n,:nom]
  c.desc "Specifie le prenom de l'etudiant"
  c.flag [:p,:prenom]
  c.desc "Specifie les notes de l'etudiant"
  c.flag [:e,:eval]

  c.action do |global_options,options,args|
    sigle_cours = global_options[:class]
    nom = options[:nom]
    prenom = options[:prenom]
    notes = options[:eval].to_f

    test_options(
      sigle_cours,
      baseDonneeCours.cours_existe?( sigle_cours ),
      ->{ puts "une classe doit etre selectionnee." },
      ->{ baseDonneeCours.selectionner_cours( sigle_cours ).
                        saisir_eval( Etudiant.new( nom, prenom ), notes ) }
    )

  end
end

desc 'Retourne la moyenne d\'un eleve (format: --class=cours moyenne nom prenom)'
command :moyenne do |c|

  c.action do |global_options,options,args|
    sigle_cours = global_options[:class]

    test_options(
      sigle_cours,
      baseDonneeCours.cours_existe?( sigle_cours ),
      ->{ puts "une classe doit etre selectionnee." },
      ->{ puts baseDonneeCours.selectionner_cours( sigle_cours ).lister_moyenne }
    )

  end
end

pre do |global,command,options,args|
  baseDonneeCours.charger_base_donnee(".bde.txt")
  true
end

post do |global,command,options,args|
  baseDonneeCours.sauvegarder_base_donnee(".bde.txt")
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
