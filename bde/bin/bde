#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app

require 'bde'

rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/bde` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/bde now"
  exit 64
end

include GLI::App

program_desc 'Application pour gerer une base donnee etudiante'

version Bde::VERSION

subcommand_option_handling :normal
arguments :strict

# Declaration de variable
format = Format.new
accesseur = Accesseur.new(format)
baseDonneeCours = BdCours.new(accesseur)

desc 'Selectionner archive base donnee'
arg_name 'nom_fichier'
arg_default = ".bde.txt"
flag [:f,:fichier]

desc 'Lister les eleves d\'un cours'
command :lister_etudiants do |c|
  c.desc 'arranger la liste par ordre alphabetique'
  c.switch [:a,:arranger]
  c.desc 'Selectionner le cours'
  c.arg_name 'sigle_cours'
  c.flag [:c,:class]

  c.action do |global_options,options,args|
    sigle_cours = options[:class]
    arranger = options[:arranger]

    verifier_cours( sigle_cours, baseDonneeCours )
    puts baseDonneeCours.selectionner_cours( sigle_cours )
                        .lister_etudiants( arranger )
  end
end

desc 'Lister les cours'
command :lister_cours do |c|
  c.desc 'arranger la liste par ordre alphabetique'
  c.switch [:a,:arranger]

  c.action do |global_options,options,args|
    arranger = options[:arranger]
    puts baseDonneeCours.lister_cours( arranger )
  end
end

desc 'Ajouter un eleve'
command :ajouter_etudiant do |c|
  c.desc 'Selectionner le cours'
  c.arg_name 'sigle_cours'
  c.flag [:c,:class]
  c.desc "Specifier le nom de l'etudiant"
  c.flag [:n,:nom]
  c.desc "Specifier le prenom de l'etudiant"
  c.flag [:p,:prenom]

  c.action do |global_options,options,args|
    sigle_cours = options[:class]
    nom = options[:nom]
    prenom = options[:prenom]

    verifier_cours( sigle_cours, baseDonneeCours )
    baseDonneeCours.selectionner_cours( sigle_cours )
                   .ajouter_etudiant( Etudiant.new( nom, prenom ) )

  end
end

desc 'Ajouter un cours'
command :ajouter_cours do |c|
  c.desc "Specifier le nom du cours"
  c.flag [:n,:nom]

  c.action do |global_options,options,args|
    nom = options[:nom]
    baseDonneeCours.ajouter_cours( nom )
  end
end

desc 'Retirer un etudiant'
command :retirer_etudiant do |c|
  c.desc 'Selectionner le cours'
  c.arg_name 'sigle_cours'
  c.flag [:c,:class]
  c.desc "Specifier le nom de l'etudiant"
  c.flag [:n,:nom]
  c.desc "Specifier le prenom de l'etudiant"
  c.flag [:p,:prenom]

  c.action do |global_options,options,args|
    sigle_cours = options[:class]
    nom = options[:nom]
    prenom = options[:prenom]

    verifier_cours( sigle_cours, baseDonneeCours )
    baseDonneeCours.selectionner_cours( sigle_cours )
                   .retirer_etudiant( Etudiant.new( nom, prenom ) )
  end
end

desc 'Retirer un cours'
command :retirer_cours do |c|
  c.desc "Specifier le nom de l'etudiant"
  c.flag [:n,:nom]

  c.action do |global_options,options,args|
    nom = options[:nom]
    baseDonneeCours.retirer_cours( nom )
  end
end


desc 'Lister les evaluations'
command :obtenir_eval do |c|

  c.action do |global_options,options,args|
    sigle_cours = global_options[:class]

    verifier_cours( sigle_cours, baseDonneeCours )
    puts baseDonneeCours.selectionner_cours( sigle_cours )
                        .lister_evaluations
  end
end

desc 'Saisit une evaluation pour un eleve '
command :saisir_eval do |c|
  c.desc "Specifier le nom de l'etudiant"
  c.flag [:n,:nom]
  c.desc "Specifier le prenom de l'etudiant"
  c.flag [:p,:prenom]
  c.desc "Specifier les notes de l'etudiant"
  c.flag [:e,:eval]

  c.action do |global_options,options,args|
    sigle_cours = global_options[:class]
    nom = options[:nom]
    prenom = options[:prenom]
    notes = options[:eval].to_f

    verifier_cours( sigle_cours, baseDonneeCours )
    baseDonneeCours.selectionner_cours( sigle_cours )
                   .saisir_eval( Etudiant.new( nom, prenom ), notes )

  end
end

desc 'Calculer la moyenne d\'un eleve'
command :moyenne do |c|

  c.action do |global_options,options,args|
    sigle_cours = global_options[:class]

    verifier_cours( sigle_cours, baseDonneeCours )
    puts baseDonneeCours.selectionner_cours( sigle_cours ).lister_moyenne

  end
end

pre do |global,command,options,args|
  #fichier_base_donnee = global[:fichier] marche pas
  baseDonneeCours.charger_base_donnee(".bde.txt")
  true
end

post do |global,command,options,args|
  #fichier_base_donnee = global[:fichier] marche pas
  baseDonneeCours.sauvegarder_base_donnee(".bde.txt")
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
