#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app

require 'bde'

rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/bde` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/bde now"
  exit 64
end

include GLI::App

program_desc 'Describe your application here'

version Bde::VERSION

subcommand_option_handling :normal
arguments :strict

# Declaration de variable
format = Format.new
accesseur = Accesseur.new(format)
baseDonneeCours = BdCours.new(accesseur)


# desc 'Describe some switch here'
# switch [:s,:switch]

desc 'Selectionne les cours'
#default_value 'the default'
arg_name 'cours'
flag [:c,:class]

desc 'Liste les eleves d\'un cours / liste les cours autrement'
#arg_name 'Describe arguments to liste here'
command :liste do |c|
  # c.desc 'Describe a switch to liste'
  # c.switch :s

  # c.desc 'Describe a flag to liste'
  # c.default_value 'default'
  # c.flag :f
  c.action do |global_options,options,args|
    cours = global_options[:class]
    if cours.nil?
      puts baseDonneeCours.lister_cours
    else
      if !baseDonneeCours.cours_exsite(cours)
        message = "cours: " + cours + " n\'existe pas.\n"
        puts message
      else
        puts baseDonneeCours.selectionner_cours(cours).lister_etudiants
      end
    end
  end
end

desc 'Ajoute un eleve a un cours (format: --class=cours ajout nom prenom)'
#arg_name 'nomEtudiant'
command :ajout do |c|
  c.action do |global_options,options,args|
    cours    = global_options[:class]
    etudiant = Etudiant.new(args.shift,args.shift) 
    if !baseDonneeCours.cours_exsite(cours)
      message = "cours: " + cours + "n\'existe pas.\n"
      puts message
    else
      baseDonneeCours.selectionner_cours(cours).ajouter_etudiant(etudiant)
    end
  end
end

desc 'Retire un etudiant d\'un cours (format: --class=cours retrait nom prenom)'
#arg_name 'nomEtudiant'
command :retrait do |c|
  c.action do |global_options,options,args|
    cours    = global_options[:class]
    etudiant = Etudiant.new(args.shift,args.shift)
    if !baseDonneeCours.cours_exsite(cours)
      message = "cours: " + cours + "n\'existe pas.\n"
      puts message
    else
      baseDonneeCours.selectionner_cours(cours).retirer_etudiant(etudiant)
    end
  end
end

desc 'Liste les evaluations pour un eleve (format: --class=cours obtenirEvaluation nom prenom)'
#arg_name 'Describe arguments to evaluation here'
command :obtenirEvaluation do |c|
  c.action do |global_options,options,args|
    cours    = global_options[:class]
    etudiant = Etudiant.new(args.shift,args.shift)
    if !baseDonneeCours.cours_exsite(cours)
      message = "cours: " + cours + "n\'existe pas.\n"
      puts message
    else
      baseDonneeCours.selectionner_cours(cours).afficher_evaluation(etudiant)
    end
  end
end

desc 'Saisit une evaluation pour un eleve (format: --class=cours saisirEvaluation nom prenom note)'
#arg_name 'Describe arguments to evaluation here'
command :saisirEvaluation do |c|  
  c.action do |global_options,options,args|
    cours    = global_options[:class]
    etudiant = Etudiant.new(args.shift,args.shift)
    note     = 12#arg.shift
    if !baseDonneeCours.cours_exsite(cours)
      message = "cours: " + cours + "n\'existe pas.\n"
      puts message
    else
      baseDonneeCours.selectionner_cours(cours).saisir_evaluation(etudiant,note)
    end
  end
end

desc 'Retourne la moyenne d\'un eleve (format: --class=cours moyenne nom prenom)'
#arg_name 'Describe arguments to moyenne here'
command :moyenne do |c|
  c.action do |global_options,options,args|
    cours    = global_options[:class]
    etudiant = Etudiant.new(args.shift,args.shift)
    if !baseDonneeCours.cours_exsite(cours)
      message = "cours: " + cours + "n\'existe pas.\n"
      puts message
    else
      baseDonneeCours.selectionner_cours(cours).afficher_moyenne(etudiant)
    end
  end
end

pre do |global,command,options,args|
  baseDonneeCours.charger_base_donnee(".bde.txt")
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  #baseDonneeCours.sauvegarder_base_donnee(".bde.txt")
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
